import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { useAuth } from '../contexts/AuthContext'
import { QRCodeSVG } from 'qrcode.react'

const cardData = [
  {
    title: 'B∆∞·ªõc 1: H∆∞·ªõng d·∫´n cho Android',
    description: 'H∆∞·ªõng d·∫´n chi ti·∫øt d√†nh cho ng∆∞·ªùi d√πng Android',
    icon: (
      <svg className="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
      </svg>
    ),
    path: '/android',
    color: 'green',
  },
  {
    title: 'B∆∞·ªõc 2: H∆∞·ªõng d·∫´n cho Iphone (iOS)',
    description: 'H∆∞·ªõng d·∫´n chi ti·∫øt d√†nh cho ng∆∞·ªùi d√πng Iphone (iOS)',
    icon: (
      <svg className="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
      </svg>
    ),
    path: '/ios',
    color: 'purple',
  },
  {
    title: 'B∆∞·ªõc 3: H∆∞·ªõng d·∫´n vi·∫øt l·ªùi nh·∫Øc cho AI',
    description: 'H∆∞·ªõng d·∫´n chi ti·∫øt v·ªÅ ngh·ªá thu·∫≠t vi·∫øt prompt ƒë·ªÉ t·∫°o video b·∫±ng AI',
    icon: (
      <svg className="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
      </svg>
    ),
    path: '/prompt',
    color: 'orange',
  },
  {
    title: 'B∆∞·ªõc 4: T·∫£i video h∆∞·ªõng d·∫´n',
    description: 'T·∫£i xu·ªëng video h∆∞·ªõng d·∫´n ƒë·ªÉ xem offline',
    icon: (
      <svg className="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
      </svg>
    ),
    path: '/download',
    color: 'blue',
  },
  {
    title: 'B∆∞·ªõc 5: Tr·ª£ l√≠ AI',
    description: 'Tr√≤ chuy·ªán v·ªõi AI ƒë·ªÉ s√°ng t·∫°o k·ªãch b·∫£n v√† nh·∫≠n t∆∞ v·∫•n k·ªπ thu·∫≠t d·ª±ng video b·∫±ng AI',
    icon: (
      <svg className="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
      </svg>
    ),
    link: 'https://gemini.google.com/gem/1Rs-tHSUZuCkk2c_yQziKPCTSaKsFGfZQ?usp=sharing',
    color: 'indigo',
    qrCode: true,
  },
];

const FeatureCard = ({ card, index, navigate }) => {
  const { title, description, icon, path, link, color, qrCode } = card;
  const animationDelay = `${index * 100}ms`;

  const handleClick = () => {
    if (path) navigate(path);
    if (link) window.open(link, '_blank');
  };

  return (
    <div className="bg-sky-700 rounded-2xl shadow-sm shadow-sky-500 outline outline-slate-400 -outline-offset-8">
      <div
        onClick={handleClick}
        style={{ animationDelay }}
        className="group overflow-hidden relative after:duration-500 before:duration-500 duration-500 
                 hover:after:duration-500 hover:after:translate-x-24 
                 hover:before:translate-y-12 hover:before:-translate-x-32 
                 hover:duration-500 
                 after:absolute after:w-24 after:h-24 after:bg-sky-700 
                 after:rounded-full after:blur-xl after:bottom-32 after:right-16 
                 after:w-12 after:h-12
                 before:absolute before:w-20 before:h-20 before:bg-sky-400 
                 before:rounded-full before:blur-xl before:top-20 before:right-16 
                 before:w-12 before:h-12
                 hover:rotate-12 flex flex-col justify-center items-center h-[480px] w-full
                 bg-neutral-900 rounded-2xl outline outline-slate-400 -outline-offset-8 
                 animate-fade-in-up opacity-0"
      >
        <div className="z-10 flex flex-col items-center gap-4 p-8">
          <div className={`h-16 w-16 bg-${color}-600 rounded-lg flex items-center justify-center`}>
            {icon}
          </div>
          <h3 className="text-xl font-bold text-white text-center">{title}</h3>
          <p className="text-gray-300 text-center text-base leading-relaxed">{description}</p>
          {qrCode && (
            <div className="flex justify-center mt-6">
              <QRCodeSVG value={link} size={140} bgColor="transparent" fgColor="#ffffff" level="M" includeMargin={false} />
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

function HomePage() {
  const { user, logout } = useAuth()
  const navigate = useNavigate()
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  const handleLogout = () => {
    logout()
  }

  return (
    <div className="min-h-screen bg-gray-900 bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(120,119,198,0.3),rgba(255,255,255,0))]">
      {/* Header */}
      <header className={`bg-gray-800 shadow-sm border-b border-gray-700 animate-fade-in-down ${mounted ? 'opacity-100' : 'opacity-0'}`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-2">
            <div className="flex items-center">
              <div className="h-8 w-8 bg-indigo-600 rounded-full flex items-center justify-center mr-3">
                <svg className="h-5 w-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                </svg>
              </div>
              <h1 className="text-xl font-semibold text-white">AI - K·ªπ Thu·∫≠t V√†ng</h1>
            </div>
            
            <div className="flex items-center space-x-4">
              <div className="text-sm text-gray-300">
                Xin ch√†o, <span className="font-medium">{user?.name}</span>
              </div>
              <button
                onClick={handleLogout}
                className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors"
              >
                ƒêƒÉng xu·∫•t
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className={`text-center mb-12 animate-fade-in-up ${mounted ? 'opacity-100' : 'opacity-0'}`}>
          <h2 className="text-4xl md:text-5xl font-bold bg-clip-text text-transparent bg-gradient-to-b from-white to-gray-400 mb-4 leading-relaxed py-2">
            üî• B√ôNG N·ªî S√ÅNG T·∫†O: SORA ƒê√É ƒê·∫æN! üî•
          </h2>
          <p className="text-xl text-gray-300 max-w-3xl mx-auto font-medium mb-4">
            KH√îNG C√íN L√Ä M∆† ∆Ø·ªöC, ƒê√ÇY L√Ä CU·ªòC C√ÅCH M·∫†NG VIDEO TI·∫æP THEO!
          </p>
          <p className="text-lg text-gray-300 max-w-3xl mx-auto mb-6">
            Xin tr√¢n tr·ªçng gi·ªõi thi·ªáu: M√¥ h√¨nh t·∫°o video SORA - M·∫°ng x√£ h·ªôi video AI ƒë·ªôt ph√°, n∆°i h·ªôi t·ª• c·∫£m h·ª©ng kh√¥ng gi·ªõi h·∫°n v√† s·ª©c m·∫°nh c√¥ng ngh·ªá t·ªëi th∆∞·ª£ng! H√£y qu√™n ƒëi nh·ªØng gi·ªõi h·∫°n c≈©, b·ªüi v√¨ Sora ch√≠nh l√† TikTok X AI Si√™u C·∫•p, m·ªü kh√≥a c√°nh c·ªïng ƒë·ªÉ b·∫°n tr·ªü th√†nh nh√† l√†m phim vƒ© ƒë·∫°i nh·∫•t c·ªßa ch√≠nh m√¨nh!
          </p>
          <div className="text-lg text-gray-300 max-w-3xl mx-auto space-y-4">
            <p className="font-medium">ƒêi·ªÅu k·ª≥ di·ªáu n·∫±m ·ªü ƒë√¢y:</p>
            <p>Ch·ªâ c·∫ßn <span className="text-yellow-400">M√î T·∫¢</span>, v√† trong ch·ªõp m·∫Øt, Sora s·∫Ω bi·∫øn b·∫°n th√†nh <span className="text-yellow-400">NH√ÇN V·∫¨T CH√çNH</span> trong b·∫•t k·ª≥ k·ªãch b·∫£n n√†o, v·ªõi ch·∫•t l∆∞·ª£ng ƒëi·ªán ·∫£nh kinh ng·∫°c!</p>
            <ul className="space-y-2">
              <li>‚ú® Mu·ªën l√†m Si√™u Anh H√πng Marvel bay l∆∞·ª£n tr√™n b·∫ßu tr·ªùi New York? <span className="text-green-400">Xong!</span></li>
              <li>‚ú® Mu·ªën tr·ªü th√†nh V≈© c√¥ng Ballet bi·ªÉu di·ªÖn d∆∞·ªõi √°nh trƒÉng huy·ªÅn ·∫£o? <span className="text-green-400">Ho√†n th√†nh!</span></li>
              <li>‚ú® Mu·ªën Th√°m hi·ªÉm V≈© Tr·ª• hay Phi√™u l∆∞u trong R·ª´ng S√¢u b√≠ ·∫©n? <span className="text-green-400">ƒê√£ c√≥ Sora lo!</span></li>
            </ul>
            <p className="font-medium text-xl text-center mt-6">H√£y s·∫µn s√†ng ƒë·ªÉ <span className="text-yellow-400">T·∫†O N·ªòI DUNG</span> v√† <span className="text-yellow-400">TH·ªêNG TR·ªä M·ªåI N·ªÄN T·∫¢NG!</span></p>
          </div>
        </div>

        {/* Feature Cards */}
        <div className="relative">
          <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-5 gap-8 mb-8">
            {cardData.map((card, index) => (
              <div className="flex justify-center">
                <div className="w-full max-w-sm">
                  <FeatureCard key={card.title} card={card} index={index} navigate={navigate} />
                </div>
              </div>
            ))}
          </div>
        </div>
      </main>
    </div>
  )
}

export default HomePage
